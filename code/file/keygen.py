import sys,random,os,re

def infoinput():
	name = raw_input("Please input UM: ").strip()
	passwd = raw_input("Please input UM password: ").strip()
	if name.find(' ')!=-1 or passwd.find(' ')!=-1:
		print "can't contain whitespace!".title()
		sys.exit(1)
	return name,passwd


RandomRange = 128
SaltStart = 14
SaltEnd = 24
class Encryption(object):
	"""docstring for Encryption"""
	def __init__(self):
		pass
	def mapgen(self):
		""" generate random mapping list """
		keymap = []
		for x in range(0,RandomRange):
			keymap.append(random.randint(0,94))
		return keymap

	def encodeValue(self,value,keymap,reverse=False):
		""" encrypt string with random mapping list generated by mapgen() """
		encryValue = ''
		if len(value)<33:
			for x in range(0,len(value)):
				encryValue += chr(( ord(value[x]) - 33 + (lambda x : keymap[RandomRange-1-x] if reverse else keymap[x])(x) )%95 + 33) # lambda can be replace by (keymap[RandomRange-1-x] if reverse else keymap[x])
			encryValue += chr(random.randint(SaltStart,SaltEnd))
			for x in xrange(len(value)+1,32):
				encryValue += chr((keymap[RandomRange-1-x] if reverse else keymap[x]) + 33)
		elif len(value)<=RandomRange:
			for x in xrange(0,len(value)):
				encryValue += chr(( ord(value[x]) - 33+ (keymap[RandomRange-1-x] if reverse else keymap[x]) )%95 + 33)
		else:
			print 'your value is so long!'.title()
			sys.exit(1)
		return encryValue

	def writeConf(self,name,password):
		""" writing encrypted name&password to config file """
		with open('./info.conf','w') as conf:
			conf.writelines(
				"""[HADOOP-SVN-INFO]
baseurl  = http://svn.paic.com.cn/svn/pad_hadoop/trunk
user     = %s
password = %s
fileList = fileList.list"""%(name,password))

	def addSalt(self,keymap):
		""" add random salt to keymap generated by mapgen() """
		addsalt = keymap[:]
		for x in xrange(0,10):
			salt = random.randint(SaltStart,SaltEnd) - 33
			addsalt.insert(random.randint(0,len(keymap)),salt)
		return ''.join(chr(i + 33) for i in addsalt)

	def writepubkey(self,pubkey):
		""" store the pubkey value """
		if os.path.exists(r'pubkey.key'):
			os.system(r'attrib -H pubkey.key')
		with open("./pubkey.key", "w") as f:
			f.write(pubkey)
		os.system(r'attrib +H pubkey.key')


class Decryption(object):
	"""docstring for Decryption"""
	salt = '['+''.join([chr(x) for x in range(SaltStart,SaltEnd+1)]) + ']'
	def clearKey(self):
		""" clear salt in pubkey written by Encryption.writepubkey() """
		keyValue = ''
		with open("./pubkey.key", "r") as f:
			keyValue = f.read()
		keyValue = re.sub(self.salt, '', keyValue)
		return keyValue

	def decodeValue(self,value,reverse=False):
		decryValue = ''
		keymap = self.clearKey()
		value = re.sub(self.salt+".*", '', value)
		if len(value)<=RandomRange:
			for x in xrange(0,len(value)):
				decryValue += chr( (ord(value[x]) - 33 - (ord(keymap[RandomRange-1-x] if reverse else keymap[x])-33) )%95 +33 )
		else:
			print "value is so long! cut it please!".title()
			sys.exit(1)
		return decryValue

# =================== encryption process
# encry = Encryption()
# encryKey = encry.mapgen()
# name, password = infoinput()
# encry.writeConf( encry.encodeValue(name, encryKey), encry.encodeValue(password, encryKey, True) )
# encry.writepubkey(encry.addSalt(encryKey))

# =================== decryption process
decry = Decryption()
print decry.decodeValue("""lR%qh)8wc-F[>x/'SUyvc6$svui~`e3""")
print decry.decodeValue("""5ArYO{Fp_Dq}iDzcH<n5NB@r[rtuZhf""",True)
# print -1%95

# ===================
reg = '['+''.join([chr(x) for x in range(SaltStart,SaltEnd+1)]) + '].*'
# salt = re.compile( '[' +''.join([chr(x) for x in range(SaltStart,SaltEnd+1)])+"].*" )
# salt = re.compile( reg )
# print reg
# value = """gn/\Oy"y&Xy^RCv3-_&%u%+6P:3SY(Z_L-Iba^^SLQ!^&3n;v?#(#y\`iTKJxI$Rb;FI_D*3SX3@i=uK[db|j0}<1%>-sNRjXbs007F`OvsGp}d{s>)Dyx)wUJ(fo84"""
# value = """JVsJ6ljjnF0rev3-_&%u%+6P:3SY(Z_"""
# print re.sub(reg, '', value)
# print m.group()



# encry = Encryption()
# encryKey = encry.mapgen()
# encryValue01 = encry.encodeValue('CHENGSIQIN754', encryKey)
# encryValue02 = encry.encodeValue('passwordofmine', encryKey, True)
# print encryValue.index(chr(1))
# print encryValue01[:encryValue01.find(chr(1))]
# print encryValue02[:encryValue02.find(chr(1))]
# encry.writeConf(encryValue01,encryValue02)


# print encryKey
# print len(encryKey)
# print [chr(i+32) for i in encryKey]
# print ''.join(chr(i) for i in encryKey)
# print encry.addSalt(encryKey)
# writepubkey(encry.addSalt(encryKey))


# print decry.clearKey()
# print repr(clearKey())
# print len(decry.clearKey())



# value = 'CHENGSIQIN754'
# print ord(value[0])

# print [value[x] for x in range(0,len(value))]

# print mapgen()[:32]

# print [chr(x) for x in xrange(33,127)]
# print [chr(x) for x in xrange(0,256)]
# print [ord(chr(x)) for x in xrange(0,256)]
# print [chr(x) for x in range(14,32)]
# print '|'.join([chr(x) for x in range(14,32)])
# print [chr(x) for x in range(33,127)]


# saltValue = addSalt(encryKey)
# print saltValue
# pattern = re.compile('|'.join([chr(x) for x in range(14,32)]))
# print pattern.sub('', saltValue)
# print saltValue


# with open("./test.key","w") as w:
# 	w.write('M'.join([chr(x) for x in range(14,24)]))
# with open("./test.key", "r") as f:
# 	keyValue = f.read()
# with open("./pubkey.key", "r") as f:
# 	keyValue02 = f.read()
# print repr(keyValue)
# print repr(keyValue02)

