# -*- coding: utf-8 -*-
import sys,random,os,re
from abstract import *


class _PubVariable(object):
	"""docstring for _PubVariable"""
	RandomRange = 128
	SaltStart = 14
	SaltEnd = 24
	pubkeyfile = os.path.join(os.path.abspath(os.path.dirname(__file__)), ".pubkey.key")


class Encryption(EncryAbstract):
	"""docstring for Encryption"""
	def __init__(self):
		super(Encryption,self).__init__()
		self.keymap = []

	def _mapgen(self):
		""" generate random mapping list """
		if self.keymap != []:
			return self.keymap
		for x in range(0,_PubVariable.RandomRange):
			self.keymap.append(random.randint(0,94))
		return self.keymap

	def encodeValue(self,value,reverse=False):
		""" encrypt string with random mapping list generated by mapgen() """
		keymap = self._mapgen()
		encryValue = ''
		if len(value)<33:
			for x in range(0,len(value)):
				encryValue += chr(( ord(value[x]) - 33 + (lambda x : keymap[_PubVariable.RandomRange-1-x] if reverse else keymap[x])(x) )%95 + 33) # lambda can be replace by (keymap[_PubVariable.RandomRange-1-x] if reverse else keymap[x])
			encryValue += chr(random.randint(_PubVariable.SaltStart,_PubVariable.SaltEnd))
			for x in xrange(len(value)+1,32):
				encryValue += chr( (range(_PubVariable.SaltStart,_PubVariable.SaltEnd+1)+range(33,128))[random.randint(0,105)] )
		elif len(value)<=_PubVariable.RandomRange:
			for x in xrange(0,len(value)):
				encryValue += chr(( ord(value[x]) - 33+ (keymap[_PubVariable.RandomRange-1-x] if reverse else keymap[x]) )%95 + 33)
		else:
			print 'your value is so long!'.title()
			sys.exit(1)
		return encryValue

	def _addSalt(self):
		""" add random salt to keymap generated by mapgen() """
		addsalt = self._mapgen()[:]
		for x in xrange(0,10):
			salt = random.randint(_PubVariable.SaltStart,_PubVariable.SaltEnd) - 33
			addsalt.insert(random.randint(0,len(addsalt)),salt)
		return ''.join(chr(i + 33) for i in addsalt)

	def _writepubkey(self):
		""" store the pubkey value """
		pubkey = self._addSalt()
		if os.path.exists(_PubVariable.pubkeyfile):
			pass
		with open(_PubVariable.pubkeyfile, "w") as f:
			f.write(pubkey)

	def outputValue(self,name,password):
		self._writepubkey()
		super(Encryption,self).outputValue(name,password)



class Decryption(DecryAbstract):
	"""docstring for Decryption"""
	salt = '['+''.join([chr(x) for x in range(_PubVariable.SaltStart,_PubVariable.SaltEnd+1)]) + ']'
	keymap = []
	def _clearKey(self):
		""" clear salt in pubkey written by Encryption._writepubkey() """
		if self.keymap != []:
			return self.keymap
		with open(_PubVariable.pubkeyfile, "r") as f:
			self.keymap = f.read()
		self.keymap = re.sub(self.salt, '', self.keymap)
		return self.keymap

	def decodeValue(self,value,reverse=False):
		keymap = self._clearKey()
		decryValue = ''
		value = re.sub(self.salt+".*", '', value)
		if len(value)<=_PubVariable.RandomRange:
			for x in xrange(0,len(value)):
				decryValue += chr( (ord(value[x]) - ord(keymap[_PubVariable.RandomRange-1-x] if reverse else keymap[x]) )%95 +33 )
		else:
			print "value is so long! cut it please!".title()
			sys.exit(1)
		return decryValue



if __name__ == '__main__':
	# ProcessAbstract.encryProcess(Encryption(),'@pingan.com.cn','')
	ProcessAbstract.encryProcess(Encryption(),'@qq.com','')


